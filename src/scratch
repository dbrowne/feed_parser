use std::fs::File;
use std::io::Read;
use std::os::raw::c_char;
use std::ffi::CStr;
use std::ptr;

#[no_mangle]
pub extern "C" fn get_file_size(path: *const c_char) -> i64 {
    // Ensure the pointer is not null
    if path.is_null() {
        return -1; // Return -1 for null input
    }

    // Convert C string to Rust string
    let c_str = unsafe { CStr::from_ptr(path) };
    let file_path = match c_str.to_str() {
        Ok(s) => s,
        Err(_) => return -1, // Return -1 for invalid UTF-8 paths
    };

    // Open the file
    let file = File::open(file_path);
    let mut file = match file {
        Ok(f) => f,
        Err(_) => return -1, // Return -1 if file cannot be opened
    };

    // Read file size
    let metadata = file.metadata();
    match metadata {
        Ok(m) => m.len() as i64,  // Return file size
        Err(_) => -1,  // Return -1 if metadata cannot be fetched
    }
}




use std::fs::File;
use std::io::{Read, Result};
use std::os::raw::c_char;
use std::ffi::CStr;
use std::ptr;
use std::slice;

#[no_mangle]
pub extern "C" fn read_file_contents(path: *const c_char, out_size: *mut usize) -> *mut u8 {
    // Ensure the path pointer is not null
    if path.is_null() || out_size.is_null() {
        return ptr::null_mut();
    }

    // Convert C string to Rust string
    let c_str = unsafe { CStr::from_ptr(path) };
    let file_path = match c_str.to_str() {
        Ok(s) => s,
        Err(_) => return ptr::null_mut(), // Return null pointer if path is invalid UTF-8
    };

    // Read the file into a Vec<u8>
    let content = match read_file(file_path) {
        Ok(data) => data,
        Err(_) => return ptr::null_mut(), // Return null pointer if file cannot be read
    };

    // Set the out_size pointer to the length of the data
    unsafe {
        *out_size = content.len();
    }

    // Leak the Vec<u8> to raw memory to return it to the caller
    let ptr = content.as_ptr() as *mut u8;
    std::mem::forget(content); // Prevent Rust from deallocating the Vec

    ptr
}

// Helper function to read a file's contents
fn read_file(file_path: &str) -> Result<Vec<u8>> {
    let mut file = File::open(file_path)?;
    let mut buffer = Vec::new();
    file.read_to_end(&mut buffer)?;
    Ok(buffer)
}

#[no_mangle]
pub extern "C" fn free_buffer(buffer: *mut u8, size: usize) {
    if !buffer.is_null() {
        unsafe {
            // Rebuild the Vec<u8> and let it drop, deallocating memory
            Vec::from_raw_parts(buffer, size, size);
        }
    }
}

use std::fs::File;
use std::io::{Read, Result};
use std::os::raw::{c_char, c_ulong};
use std::ffi::CStr;
use std::ptr;

#[no_mangle]
pub extern "C" fn read_file_to_buffer(path: *const c_char, buffer: *mut u8, buffer_size: c_ulong) -> c_ulong {
    // Ensure the path and buffer pointers are not null
    if path.is_null() || buffer.is_null() {
        return 0; // Return 0 for null input
    }

    // Convert C string to Rust string
    let c_str = unsafe { CStr::from_ptr(path) };
    let file_path = match c_str.to_str() {
        Ok(s) => s,
        Err(_) => return 0, // Return 0 for invalid UTF-8 paths
    };

    // Read the file into a temporary Vec<u8>
    let content = match read_file(file_path) {
        Ok(data) => data,
        Err(_) => return 0, // Return 0 if file cannot be read
    };

    // Check if the buffer size is sufficient
    let content_len = content.len() as c_ulong;
    if content_len > buffer_size {
        return 0; // Return 0 if the buffer is too small
    }

    // Copy the file contents into the provided buffer
    unsafe {
        ptr::copy_nonoverlapping(content.as_ptr(), buffer, content_len as usize);
    }

    content_len // Return the number of bytes written
}

// Helper function to read a file's contents
fn read_file(file_path: &str) -> Result<Vec<u8>> {
    let mut file = File::open(file_path)?;
    let mut buffer = Vec::new();
    file.read_to_end(&mut buffer)?;
    Ok(buffer)
}


use std::fs::File;
use std::io::{self, Write};
use rand::Rng;
use std::os::raw::c_char;
use std::ffi::CStr;
use std::ptr;

#[no_mangle]
pub extern "C" fn create_random_file(path: *const c_char, n: u32) -> i32 {
    // Ensure the path pointer is not null
    if path.is_null() {
        return -1; // Return -1 for null input
    }

    // Convert C string to Rust string
    let c_str = unsafe { CStr::from_ptr(path) };
    let file_path = match c_str.to_str() {
        Ok(s) => s,
        Err(_) => return -1, // Return -1 for invalid UTF-8 paths
    };

    // Create the file and write random characters to it
    match write_random_chars_to_file(file_path, n) {
        Ok(_) => 0, // Return 0 on success
        Err(_) => -1, // Return -1 on failure
    }
}

// Helper function to write n random characters to a file
fn write_random_chars_to_file(file_path: &str, n: u32) -> io::Result<()> {
    let mut file = File::create(file_path)?;

    let mut rng = rand::thread_rng();
    
    for _ in 0..n {
        // Generate a random ASCII character (printable range)
        let random_char = rng.gen_range(b'!'..=b'~') as u8; // Random character in range '!' to '~'
        file.write_all(&[random_char])?;
    }
    
    Ok(())
}


extern crate yasna;

fn parse_pkcs8_der_key(der: &[u8]) -> Result<(), &'static str> {
    yasna::parse_ber(der, |reader| {
        reader.read_sequence(|reader| {
            // Read the version number (INTEGER)
            let version = reader.next().read_u8()?;
            if version != 0 {
                return Err("Unsupported PKCS#8 version");
            }

            // Read the algorithm identifier SEQUENCE
            reader.next().read_sequence(|reader| {
                let oid = reader.next().read_oid()?;
                if oid != yasna::models::ObjectIdentifier::from_slice(&[1, 2, 840, 113549, 1, 1, 1]) {
                    return Err("Unsupported algorithm identifier");
                }

                // Read the NULL (parameters)
                reader.next().read_null()?;
                Ok(())
            })?;

            // Now read the private key as an OCTET STRING
            let private_key = reader.next().read_bytes()?;
            debug_log!("Private key (ASN.1-encoded): {:?}", private_key);

            // Parse the RSA private key inside the OCTET STRING
            yasna::parse_ber(&private_key, |reader| {
                reader.read_sequence(|reader| {
                    // Read the version number (INTEGER)
                    let rsa_version = reader.next().read_u8()?;
                    if rsa_version != 0 {
                        return Err("Unsupported RSA version");
                    }

                    // Parse the RSA key components (modulus, exponents, primes, etc.)
                    let (modulus, _) = reader.next().read_bigint_bytes()?;
                    debug_log!("Modulus (n): {:?}", modulus);

                    let (public_exponent, _) = reader.next().read_bigint_bytes()?;
                    debug_log!("Public Exponent (e): {:?}", public_exponent);

                    let (private_exponent, _) = reader.next().read_bigint_bytes()?;
                    debug_log!("Private Exponent (d): {:?}", private_exponent);

                    // Parse the rest of the RSA key (p, q, d mod (p-1), etc.)
                    let (prime1, _) = reader.next().read_bigint_bytes()?;
                    debug_log!("Prime 1 (p): {:?}", prime1);

                    let (prime2, _) = reader.next().read_bigint_bytes()?;
                    debug_log!("Prime 2 (q): {:?}", prime2);

                    let (exponent1, _) = reader.next().read_bigint_bytes()?;
                    debug_log!("Exponent 1 (d mod (p-1)): {:?}", exponent1);

                    let (exponent2, _) = reader.next().read_bigint_bytes()?;
                    debug_log!("Exponent 2 (d mod (q-1)): {:?}", exponent2);

                    let (coefficient, _) = reader.next().read_bigint_bytes()?;
                    debug_log!("Coefficient ((q^-1) mod p): {:?}", coefficient);

                    Ok(())
                })
            })?;

            Ok(())
        })
    }).map_err(|_| "Failed to parse PKCS#8 key")
}

#![no_std]

use core::ptr::null_mut;

#[repr(C)]
pub struct BIGNUM;  // The BIGNUM structure from OpenSSL or sgx_ssl

extern "C" {
    fn BN_new() -> *mut BIGNUM;         // FFI to create a new BIGNUM
    fn BN_bin2bn(s: *const u8, len: i32, ret: *mut BIGNUM) -> *mut BIGNUM;  // FFI to create BIGNUM from bytes
    fn BN_free(bn: *mut BIGNUM);        // FFI to free the BIGNUM
}

pub struct BignumWrapper {
    bn_ptr: *mut BIGNUM,
}

impl BignumWrapper {
    // Constructor that wraps an existing BIGNUM pointer
    pub fn new(bn_ptr: *mut BIGNUM) -> Self {
        BignumWrapper { bn_ptr }
    }

    // Create a new BIGNUM from a byte slice
    pub fn create_bn_from_bytes(bytes: &[u8]) -> Option<Self> {
        let bn_ptr = unsafe { BN_new() };
        if bn_ptr.is_null() {
            return None;  // Allocation failed
        }

        // Convert bytes to BIGNUM using BN_bin2bn
        let result = unsafe { BN_bin2bn(bytes.as_ptr(), bytes.len() as i32, bn_ptr) };
        if result.is_null() {
            // Free the BIGNUM if conversion failed
            unsafe { BN_free(bn_ptr) };
            None
        } else {
            Some(BignumWrapper { bn_ptr })
        }
    }

    // Provide safe access to the internal raw pointer (if needed)
    pub fn as_ptr(&self) -> *mut BIGNUM {
        self.bn_ptr
    }
}

impl Drop for BignumWrapper {
    fn drop(&mut self) {
        unsafe {
            if !self.bn_ptr.is_null() {
                BN_free(self.bn_ptr);  // Free the BIGNUM when the wrapper is dropped
                self.bn_ptr = null_mut();  // Set pointer to null to avoid double free
            }
        }
    }
}




#![no_std]

use serde::{Serialize, Serializer, Deserialize, Deserializer, ser::SerializeStruct};
use core::fmt;
use core::cmp::min;
use serde::de::{Visitor, SeqAccess, MapAccess, Error};

// Maximum size for source_data, adjust as needed
const MAX_SOURCE_DATA_LEN: usize = 64;

// Enum for CK_RSA_PKCS_OAEP_SOURCE_TYPE (e.g., CKZ_DATA_SPECIFIED)
#[derive(Serialize, Deserialize, Clone, Copy, Debug)]
pub enum OaepSourceType {
    DataSpecified = 1,
}

// Enum for CK_RSA_PKCS_MGF_TYPE (e.g., CKG_MGF1_SHA256)
#[derive(Serialize, Deserialize, Clone, Copy, Debug)]
pub enum MgfType {
    MGF1_SHA256 = 0x00000002,
}

// Enum for CK_MECHANISM_TYPE (e.g., CKM_SHA256)
#[derive(Serialize, Deserialize, Clone, Copy, Debug)]
pub enum MechanismType {
    SHA256 = 0x00000250,
}

// Struct for CK_RSA_PKCS_OAEP_PARAMS with a fixed-size array
#[derive(Clone, Copy, Debug)]
pub struct RsaOaepParams {
    pub hash_alg: MechanismType,                   // Hash algorithm (e.g., SHA-256)
    pub mgf: MgfType,                              // Mask generation function (e.g., MGF1-SHA256)
    pub source: OaepSourceType,                    // Source type (e.g., DataSpecified)
    pub source_data: [u8; MAX_SOURCE_DATA_LEN],    // Fixed-size array for source data
    pub source_data_len: usize,                    // Length of actual data in source_data
}

// Implementing Default for RsaOaepParams
impl Default for RsaOaepParams {
    fn default() -> Self {
        RsaOaepParams {
            hash_alg: MechanismType::SHA256,
            mgf: MgfType::MGF1_SHA256,
            source: OaepSourceType::DataSpecified,
            source_data: [0; MAX_SOURCE_DATA_LEN], // Default to zeroed array
            source_data_len: 0,                    // No data by default
        }
    }
}

// Implementing Display
impl fmt::Display for RsaOaepParams {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(
            f,
            "RsaOaepParams {{\n  hash_alg: {:?},\n  mgf: {:?},\n  source: {:?},\n  source_data_len: {},\n  source_data: {:?}\n}}",
            self.hash_alg,
            self.mgf,
            self.source,
            self.source_data_len,
            &self.source_data[..self.source_data_len], // Only display valid data
        )
    }
}

// Implement custom Serialize
impl Serialize for RsaOaepParams {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        let mut state = serializer.serialize_struct("RsaOaepParams", 5)?;
        state.serialize_field("hash_alg", &self.hash_alg)?;
        state.serialize_field("mgf", &self.mgf)?;
        state.serialize_field("source", &self.source)?;
        state.serialize_field("source_data", &self.source_data[..self.source_data_len])?;
        state.serialize_field("source_data_len", &self.source_data_len)?;
        state.end()
    }
}

// Custom deserialization implementation using Visitor
struct RsaOaepParamsVisitor;

impl<'de> Visitor<'de> for RsaOaepParamsVisitor {
    type Value = RsaOaepParams;

    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
        formatter.write_str("a struct representing RsaOaepParams")
    }

    fn visit_seq<V>(self, mut seq: V) -> Result<RsaOaepParams, V::Error>
    where
        V: SeqAccess<'de>,
    {
        let hash_alg: MechanismType = seq.next_element()?.ok_or_else(|| V::Error::invalid_length(0, &self))?;
        let mgf: MgfType = seq.next_element()?.ok_or_else(|| V::Error::invalid_length(1, &self))?;
        let source: OaepSourceType = seq.next_element()?.ok_or_else(|| V::Error::invalid_length(2, &self))?;
        let source_data: Vec<u8> = seq.next_element()?.ok_or_else(|| V::Error::invalid_length(3, &self))?;
        let source_data_len: usize = seq.next_element()?.ok_or_else(|| V::Error::invalid_length(4, &self))?;

        let mut fixed_source_data = [0u8; MAX_SOURCE_DATA_LEN];
        let len = min(source_data.len(), MAX_SOURCE_DATA_LEN);
        fixed_source_data[..len].copy_from_slice(&source_data[..len]);

        Ok(RsaOaepParams {
            hash_alg,
            mgf,
            source,
            source_data: fixed_source_data,
            source_data_len,
        })
    }

    fn visit_map<M>(self, mut map: M) -> Result<RsaOaepParams, M::Error>
    where
        M: MapAccess<'de>,
    {
        let mut hash_alg = None;
        let mut mgf = None;
        let mut source = None;
        let mut source_data = None;
        let mut source_data_len = None;

        while let Some(key) = map.next_key()? {
            match key {
                "hash_alg" => {
                    hash_alg = Some(map.next_value()?);
                }
                "mgf" => {
                    mgf = Some(map.next_value()?);
                }
                "source" => {
                    source = Some(map.next_value()?);
                }
                "source_data" => {
                    source_data = Some(map.next_value()?);
                }
                "source_data_len" => {
                    source_data_len = Some(map.next_value()?);
                }
                _ => {}
            }
        }

        let hash_alg = hash_alg.ok_or_else(|| M::Error::missing_field("hash_alg"))?;
        let mgf = mgf.ok_or_else(|| M::Error::missing_field("mgf"))?;
        let source = source.ok_or_else(|| M::Error::missing_field("source"))?;
        let source_data = source_data.ok_or_else(|| M::Error::missing_field("source_data"))?;
        let source_data_len = source_data_len.ok_or_else(|| M::Error::missing_field("source_data_len"))?;

        let mut fixed_source_data = [0u8; MAX_SOURCE_DATA_LEN];
        let len = min(source_data.len(), MAX_SOURCE_DATA_LEN);
        fixed_source_data[..len].copy_from_slice(&source_data[..len]);

        Ok(RsaOaepParams {
            hash_alg,
            mgf,
            source,
            source_data: fixed_source_data,
            source_data_len,
        })
    }
}

// Implement custom Deserialize
impl<'de> Deserialize<'de> for RsaOaepParams {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        deserializer.deserialize_struct(
            "RsaOaepParams",
            &["hash_alg", "mgf", "source", "source_data", "source_data_len"],
            RsaOaepParamsVisitor,
        )
    }
}



//

fn encrypt_rsa_oaep(
    pkey: *mut EVP_PKEY,
    plaintext: &[u8],
    ciphertext: &mut [u8],
) -> Result<usize, &'static str> {
    unsafe {
        let ctx = EVP_PKEY_CTX_new(pkey, core::ptr::null_mut());
        if ctx.is_null() {
            return Err("Failed to create EVP context");
        }

        // Initialize encryption context
        if EVP_PKEY_encrypt_init(ctx) <= 0 {
            EVP_PKEY_CTX_free(ctx);
            return Err("Failed to initialize encryption");
        }

        // Set RSA padding to RSA_PKCS1_OAEP_PADDING
        if EVP_PKEY_CTX_set_rsa_padding(ctx, 4) <= 0 {  // 4 represents RSA_PKCS1_OAEP_PADDING
            EVP_PKEY_CTX_free(ctx);
            return Err("Failed to set RSA OAEP padding");
        }

        // Optionally, set the OAEP hash function (default is SHA-1, but you can set SHA-256)
        if EVP_PKEY_CTX_set_rsa_oaep_md(ctx, EVP_sha256()) <= 0 {
            EVP_PKEY_CTX_free(ctx);
            return Err("Failed to set RSA OAEP hash function");
        }

        // First call EVP_PKEY_encrypt with a NULL output buffer to determine the required size
        let mut outlen: usize = 0;
        if EVP_PKEY_encrypt(ctx, core::ptr::null_mut(), &mut outlen, plaintext.as_ptr(), plaintext.len()) <= 0 {
            EVP_PKEY_CTX_free(ctx);
            return Err("Failed to determine ciphertext length");
        }

        // Check if output buffer is large enough
        if outlen > ciphertext.len() {
            EVP_PKEY_CTX_free(ctx);
            return Err("Ciphertext buffer too small");
        }

        // Perform the encryption
        if EVP_PKEY_encrypt(ctx, ciphertext.as_mut_ptr(), &mut outlen, plaintext.as_ptr(), plaintext.len()) <= 0 {
            EVP_PKEY_CTX_free(ctx);
            return Err("RSA encryption failed");
        }

        EVP_PKEY_CTX_free(ctx);
        Ok(outlen)  // Return the number of encrypted bytes
    }
}


//


fn decrypt_rsa_oaep(
    pkey: *mut EVP_PKEY,
    ciphertext: &[u8],
    plaintext: &mut [u8],
) -> Result<usize, &'static str> {
    unsafe {
        let ctx = EVP_PKEY_CTX_new(pkey, core::ptr::null_mut());
        if ctx.is_null() {
            return Err("Failed to create EVP context");
        }

        // Initialize decryption context
        if EVP_PKEY_decrypt_init(ctx) <= 0 {
            EVP_PKEY_CTX_free(ctx);
            return Err("Failed to initialize decryption");
        }

        // Set RSA padding to RSA_PKCS1_OAEP_PADDING
        if EVP_PKEY_CTX_set_rsa_padding(ctx, 4) <= 0 {  // 4 represents RSA_PKCS1_OAEP_PADDING
            EVP_PKEY_CTX_free(ctx);
            return Err("Failed to set RSA OAEP padding");
        }

        // Optionally, set the OAEP hash function (default is SHA-1, but you can set SHA-256)
        if EVP_PKEY_CTX_set_rsa_oaep_md(ctx, EVP_sha256()) <= 0 {
            EVP_PKEY_CTX_free(ctx);
            return Err("Failed to set RSA OAEP hash function");
        }

        // First call EVP_PKEY_decrypt with a NULL output buffer to determine the required size
        let mut outlen: usize = 0;
        if EVP_PKEY_decrypt(ctx, core::ptr::null_mut(), &mut outlen, ciphertext.as_ptr(), ciphertext.len()) <= 0 {
            EVP_PKEY_CTX_free(ctx);
            return Err("Failed to determine plaintext length");
        }

        // Check if output buffer is large enough
        if outlen > plaintext.len() {
            EVP_PKEY_CTX_free(ctx);
            return Err("Plaintext buffer too small");
        }

        // Perform the decryption
        if EVP_PKEY_decrypt(ctx, plaintext.as_mut_ptr(), &mut outlen, ciphertext.as_ptr(), ciphertext.len()) <= 0 {
            EVP_PKEY_CTX_free(ctx);
            return Err("RSA decryption failed");
        }

        EVP_PKEY_CTX_free(ctx);
        Ok(outlen)  // Return the number of decrypted bytes
    }
}


//

fn main() {
    let rsa_public_key: *mut EVP_PKEY = load_rsa_public_key();  // Load your public key here
    let plaintext = b"Hello, RSA OAEP with EVP!";
    let mut ciphertext = [0u8; 256];  // Size should match RSA key size (e.g., 2048-bit RSA = 256 bytes)

    match encrypt_rsa_oaep(rsa_public_key, plaintext, &mut ciphertext) {
        Ok(ciphertext_len) => {
            println!("Encrypted data: {:?}", &ciphertext[..ciphertext_len]);
        }
        Err(e) => {
            eprintln!("Encryption error: {}", e);
        }
    }

    EVP_PKEY_free(rsa_public_key);  // Free the public key
}




use libc::{fd_set, select, timeval, FD_ISSET, FD_SET, FD_ZERO};
use std::os::raw::c_int;
use std::time::Duration;

/// Enum representing the readiness state of a socket.
#[repr(C)]
pub enum SocketReadiness {
    /// Indicates that the socket is ready to be read.
    ReadyToRead = 1,
    /// Indicates that the socket is in a pending state due to a timeout.
    Pending = 0,
    /// Indicates that an error occurred while checking socket readiness.
    Error = -1,
}

/// Checks if a socket file descriptor is ready to read within a specified timeout.
///
/// This function performs a non-blocking check on a socket file descriptor using the `select`
/// system call. The function determines if data is available to read on the file descriptor
/// within the specified timeout period. The result is returned through an output parameter
/// as an integer representing the readiness state.
///
/// # Parameters
///
/// - `fd`: The file descriptor of the socket to check for readiness.
/// - `timeout_secs`: The timeout duration in seconds to wait for the socket to become ready.
/// - `readiness_status`: A pointer to an integer where the function will store the result
///   of the readiness check. The possible values are:
///   - `1` (`SocketReadiness::ReadyToRead`): The socket is ready to be read.
///   - `0` (`SocketReadiness::Pending`): The socket is not ready, and the timeout expired.
///   - `-1` (`SocketReadiness::Error`): An error occurred while checking readiness.
///
/// # Safety
///
/// This function uses `unsafe` blocks for interacting with raw pointers and making system calls.
/// It is the caller's responsibility to ensure that `fd` is a valid socket file descriptor and that
/// `readiness_status` is a valid pointer to an `int`.
///
/// # Examples
///
/// ```rust
/// extern "C" {
///     fn check_socket_readiness_ocall(fd: c_int, timeout_secs: u32, readiness_status: *mut c_int);
/// }
///
/// let mut readiness_status = 0;
/// unsafe {
///     check_socket_readiness_ocall(socket_fd, 5, &mut readiness_status);
/// }
///
/// match readiness_status {
///     1 => println!("Socket is ready to read."),
///     0 => println!("Socket is in pending state (timeout expired)."),
///    -1 => println!("An error occurred while checking socket readiness."),
///     _ => println!("Unexpected readiness status."),
/// }
/// ```
///
/// # Implementation Details
///
/// This function uses `select` to check if the file descriptor is ready for reading. The `fd_set`
/// structure and `timeval` timeout are configured accordingly, and the result from `select`
/// is mapped to the corresponding `SocketReadiness` state.
#[no_mangle]
pub extern "C" fn check_socket_readiness_ocall(fd: c_int, timeout_secs: u32, readiness_status: *mut c_int) {
    // Initialize an empty `fd_set` to hold file descriptors for `select`
    let mut read_fds: fd_set = unsafe { std::mem::zeroed() };

    // Use `FD_ZERO` and `FD_SET` to configure `read_fds` for the specified file descriptor
    unsafe {
        FD_ZERO(&mut read_fds);    // Clear all bits in the `fd_set`
        FD_SET(fd, &mut read_fds); // Add `fd` to the `fd_set`
    }

    // Set up the timeout for `select`
    let mut timeout = timeval {
        tv_sec: timeout_secs as i64,
        tv_usec: 0,
    };

    // Call `select` to check if `fd` is ready for reading within the timeout period
    let result = unsafe { select(fd + 1, &mut read_fds, std::ptr::null_mut(), std::ptr::null_mut(), &mut timeout) };

    // Determine the readiness based on the result from `select`
    let readiness = match result {
        -1 => SocketReadiness::Error as c_int,             // Error occurred
         0 => SocketReadiness::Pending as c_int,           // Timeout, no data available
         _ if unsafe { FD_ISSET(fd, &read_fds) } => SocketReadiness::ReadyToRead as c_int, // Data ready to read
         _ => SocketReadiness::Error as c_int,             // Unexpected case, treat as error
    };

    // Set the output parameter to the readiness status
    unsafe { *readiness_status = readiness };
}

use std::os::unix::io::AsRawFd;
use std::os::raw::c_int;
use libc::{socketpair, AF_UNIX, SOCK_STREAM};
use std::io::Write;
use std::ptr;
use std::time::Duration;

/// Enum representing the readiness state of a socket.
#[repr(C)]
pub enum SocketReadiness {
    ReadyToRead = 1,
    Pending = 0,
    Error = -1,
}

extern "C" {
    fn check_socket_readiness_ocall(fd: c_int, timeout_secs: u32, readiness_status: *mut c_int);
}

fn create_socketpair() -> (c_int, c_int) {
    let mut fds = [0; 2];
    let result = unsafe { socketpair(AF_UNIX, SOCK_STREAM, 0, fds.as_mut_ptr()) };
    assert_eq!(result, 0, "Failed to create socket pair");
    (fds[0], fds[1])
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::os::raw::c_int;

    #[test]
    fn test_socket_ready_to_read() {
        let (fd1, fd2) = create_socketpair();

        // Write some data to make `fd1` ready to read
        let data = b"Hello";
        unsafe {
            libc::write(fd2, data.as_ptr() as *const _, data.len());
        }

        let mut readiness_status: c_int = 0;
        unsafe {
            check_socket_readiness_ocall(fd1, 5, &mut readiness_status);
        }

        // `fd1` should be ready to read since data was written to `fd2`
        assert_eq!(readiness_status, SocketReadiness::ReadyToRead as c_int);

        // Close file descriptors
        unsafe {
            libc::close(fd1);
            libc::close(fd2);
        }
    }

    #[test]
    fn test_socket_pending() {
        let (fd1, fd2) = create_socketpair();

        let mut readiness_status: c_int = 0;
        unsafe {
            // Check readiness with a short timeout. No data is written, so it should time out.
            check_socket_readiness_ocall(fd1, 1, &mut readiness_status);
        }

        // `fd1` should be in a pending state because no data is available and the timeout expired
        assert_eq!(readiness_status, SocketReadiness::Pending as c_int);

        // Close file descriptors
        unsafe {
            libc::close(fd1);
            libc::close(fd2);
        }
    }

    #[test]
    fn test_socket_error() {
        let invalid_fd = -1; // Invalid file descriptor

        let mut readiness_status: c_int = 0;
        unsafe {
            // Using an invalid file descriptor should result in an error
            check_socket_readiness_ocall(invalid_fd, 1, &mut readiness_status);
        }

        // Since `invalid_fd` is not valid, we should get an error state
        assert_eq!(readiness_status, SocketReadiness::Error as c_int);
    }
}
use aes_gcm::aead::{Aead, KeyInit, OsRng};
use aes_gcm::{Aes256Gcm, Nonce};

fn main() {
    let key = Aes256Gcm::generate_key(&mut OsRng);
    let cipher = Aes256Gcm::new(&key);

    let nonce = Aes256Gcm::generate_nonce(&mut OsRng);
    let plaintext = b"Hello, AES-GCM!";
    let ciphertext = cipher.encrypt(&nonce, plaintext.as_ref())
        .expect("encryption failure!");

    let decrypted_text = cipher.decrypt(&nonce, ciphertext.as_ref())
        .expect("decryption failure!");

    assert_eq!(&decrypted_text, plaintext);
    println!("Decrypted text: {:?}", decrypted_text);
}
